node {
    def myGradleContainer = docker.image('gradle:8.5-jdk8')
    myGradleContainer.pull()

    try {
        stage('Preparaci√≥n') {
            git branch: 'main', url: 'https://github.com/macloujulian/gs-gradle.git'
        }

        stage('Construcci√≥n') {
            myGradleContainer.inside {
                sh 'cd complete && ./gradlew build'
            }
        }

        stage('Sonar Scanner') {
            // Configuraci√≥n de SonarQube
            // Aseg√∫rate de que el plugin de SonarQube est√© instalado en Jenkins

            withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_TOKEN')]) {
                sh '''
                    sonar-scanner \
                    -Dsonar.host.url=http://sonarqube:9000 \
                    -Dsonar.login=$SONAR_TOKEN \
                    -Dsonar.projectKey=GS \
                    -Dsonar.projectName=gs-gradle \
                    -Dsonar.projectVersion=$BUILD_NUMBER \
                    -Dsonar.sources=complete/src/main \
                    -Dsonar.tests=complete/src/test \
                    -Dsonar.java.binaries=complete/build/classes
                '''
            }

            slackSend (
                color: '#36a64f',
                message: "*‚úÖ Pipeline exitoso:* `gs-gradle`\nJob: `${env.JOB_NAME}` #${env.BUILD_NUMBER}",
                channel: '#alertas'
            )
        }

    } catch (e) {
        // üîî Notificaci√≥n a Slack si algo falla
        slackSend (
            color: '#FF0000',
            message: "*Fall√≥ el pipeline del proyecto gs-gradle en Jenkins.*\nJob: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nError: ${e.getMessage()}",
            channel: '#alertas'
        )
        throw e // re-lanzar el error para que Jenkins lo marque como fallo
    }
}
